import pytest

from shapely.geometry import LineString, Polygon

from decomposition.decomposition import Decomposition
from altitudes.altitude import get_min_altitude
from min_alt_optimizer import (vertex_sampler, vertex_sampler_with_holes, get_cut_origins,
                               min_alt_optimize)


UNIT_SQUARE = [[(0., 0.), (1., 0.), (1., 1.), (0., 1.)]]
UNIT_SQUARE_HOLE = [[(0., 0.), (1., 0.), (1., 1.), (0., 1.)],
                    [[(0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2)]]]
RELFEX_SQUARE_TWO_HOLE = [
    [(0., 0.), (1., 0.), (1.5, 1.), (3., 0.), (8., 0.), (8., 3.), (3., 3.), (1.5, 2.), (1., 3.),
     (0., 3.)],
    [[(0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2)],
     [(7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2)]]
]
ONE_REFLEX = [[(0., 0.), (1., 0.), (2., 1.), (3., 0.), (4., 0.), (4., 2.), (0., 2.)]]
TWO_REFLEX = [[(0., 0.), (1., 0.), (2., 1.), (3., 0.), (4., 0.), (4., 3.), (3., 3.), (2., 2.),
               (1., 3.), (0., 3.)]]
TWO_REFLEX_ELONG = [[(0., 0.), (1., 0.), (1.5, 1.), (3., 0.), (8., 0.), (8., 3.), (3., 3.),
                     (1.5, 2.), (1., 3.), (0., 3.)]]


@pytest.mark.parametrize("test_polygon, exp_origins", [
    (ONE_REFLEX, [(2., 1.)]),
])
def test_get_cut_origins(test_polygon, exp_origins):
    """Verify that cut origins is computed correctly."""
    decomp = Decomposition(Polygon(*test_polygon))

    origins = get_cut_origins(decomp)

    assert origins == exp_origins


@pytest.mark.parametrize("test_polygon, expected_sample_space", [
    (ONE_REFLEX, [((2., 1.), (0., 0.)),
                  ((2., 1.), (4., 0.)),
                  ((2., 1.), (4., 2.)),
                  ((2., 1.), (0., 2.)),
                 ]),
    (TWO_REFLEX, [((2., 1.), (0., 0.)),
                  ((2., 1.), (4., 0.)),
                  ((2., 1.), (4., 3.)),
                  ((2., 1.), (3., 3.)),
                  ((2., 1.), (2., 2.)),
                  ((2., 1.), (1., 3.)),
                  ((2., 1.), (0., 3.)),
                  ((2., 2.), (0., 0.)),
                  ((2., 2.), (1., 0.)),
                  ((2., 2.), (3., 0.)),
                  ((2., 2.), (4., 0.)),
                  ((2., 2.), (4., 3.)),
                  ((2., 2.), (0., 3.)),
                 ]),
])
def test_vertex_sampler(test_polygon, expected_sample_space):
    """
    Unit tests for simple sampler. Simple samplers' objective is given a polygon, propose a list
    of cuts which originate from reflex verticies and end on some vertex of the polygon.
    These cuts will then be used by the optimizer to find the most optimal one.
    """
    decomp = Decomposition(Polygon(*test_polygon))

    sample_space = vertex_sampler(decomp)

    ls_expected = [LineString(a) for a in expected_sample_space]
    for result in sample_space:
        print(f"Checking following cut: {result.coords[:]}")
        assert any(result.equals(a) for a in ls_expected)
    for expected_sample in ls_expected:
        print(f"Checking expected sample: {expected_sample.coords[:]}")
        assert any(expected_sample.equals(a) for a in sample_space)

    assert len(sample_space) == len(expected_sample_space)


@pytest.mark.parametrize("test_polygon, expected_sample_space", [
    (UNIT_SQUARE_HOLE, [((0., 1.), (0.2, 0.2), (0.2, 0.8), (1., 1.)),

                        ((0., 0.), (0.2, 0.2), (0.2, 0.8), (0., 1.)),
                        ((0., 0.), (0.2, 0.2), (0.2, 0.8), (1., 1.)),

                        ((1., 0.), (0.2, 0.2), (0.2, 0.8), (0., 0.)),
                        ((1., 0.), (0.2, 0.2), (0.2, 0.8), (0., 1.)),
                        ((1., 0.), (0.2, 0.2), (0.2, 0.8), (1., 1.)),

                        ((0., 1.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (1., 1.)),
                        ((0., 1.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (1., 0.)),

                        ((0., 0.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0., 1.)),
                        ((0., 0.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (1., 1.)),
                        ((0., 0.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (1., 0.)),

                        ((1., 0.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0., 1.)),
                        ((1., 0.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (1., 1.)),

                        ((0., 1.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 1.)),
                        ((0., 1.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 0.)),
                        ((0., 1.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (0., 0.)),

                        ((0., 0.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 1.)),
                        ((0., 0.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 0.)),

                        ((1., 0.), (0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 1.)),

                        ((0., 0.), (0.2, 0.8), (0.8, 0.8), (0., 1.)),
                        ((0., 0.), (0.2, 0.8), (0.8, 0.8), (1., 1.)),
                        ((0., 0.), (0.2, 0.8), (0.8, 0.8), (1., 0.)),

                        ((0., 1.), (0.2, 0.8), (0.8, 0.8), (1., 1.)),
                        ((0., 1.), (0.2, 0.8), (0.8, 0.8), (1., 0.)),

                        ((1., 1.), (0.2, 0.8), (0.8, 0.8), (1., 0.)),

                        ((0., 0.), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 0.)),
                        ((0., 0.), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 1.)),

                        ((0., 1.), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 1.)),
                        ((0., 1.), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 0.)),
                        ((0., 1.), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (0., 0.)),

                        ((1., 1.), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (1., 0.)),
                        ((1., 1.), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2), (0., 0.)),

                        ((0., 1.), (0.8, 0.8), (0.8, 0.2), (1., 1.)),
                        ((0., 1.), (0.8, 0.8), (0.8, 0.2), (1., 0.)),
                        ((0., 1.), (0.8, 0.8), (0.8, 0.2), (0., 0.)),

                        ((1., 1.), (0.8, 0.8), (0.8, 0.2), (1., 0.)),
                        ((1., 1.), (0.8, 0.8), (0.8, 0.2), (0., 0.)),

                        ((1., 0.), (0.8, 0.8), (0.8, 0.2), (0., 0.)),
                       ]),
    (RELFEX_SQUARE_TWO_HOLE, [[(1.5, 1), (8, 0)],
                              [(1.5, 1), (3, 3)],
                              [(1.5, 1), (1.5, 2)],
                              [(1.5, 1), (1, 3)],

                              [(1.5, 2), (1, 0)],
                              [(1.5, 2), (3, 0)],
                              [(1.5, 2), (8, 3)],

                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (1., 3.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0., 3.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0., 0.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (1., 3.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0., 3.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (1., 3.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1., 0.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1.5, 1.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (3., 0.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1.5, 2.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1., 3.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0., 3.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1.5, 1.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (3., 0.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1.5, 2.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1., 3.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0., 3.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1., 0.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1.5, 1.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (3., 0.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1.5, 2.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (1., 3.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (3., 3.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 2.)],
                              [(0., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 3.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (3., 3.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 2.)],
                              [(1., 0.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 3.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (0., 0.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (3., 3.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 2.)],
                              [(0., 3.), (0.2, 0.2), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 3.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (1., 0.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (1.5, 1.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (3., 0.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (1.5, 2.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (1., 3.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (0., 3.)],
                              [(1., 3.), (0.2, 2.8), (0.8, 2.8), (1., 0.)],
                              [(1., 3.), (0.2, 2.8), (0.8, 2.8), (1.5, 1.)],
                              [(1., 3.), (0.2, 2.8), (0.8, 2.8), (3., 0.)],
                              [(1., 3.), (0.2, 2.8), (0.8, 2.8), (1.5, 2.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (1., 0.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (1.5, 1.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (3., 0.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (1.5, 2.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (1., 3.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (3., 3.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 2.)],
                              [(0., 0.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 3.)],
                              [(1., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (0., 0.)],
                              [(1., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(1., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(1., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (3., 3.)],
                              [(1., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 2.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (0., 0.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (3., 3.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1.5, 2.)],
                              [(0., 3.), (0.2, 2.8), (0.8, 2.8), (0.8, 0.2), (1., 3.)],

                              [(1., 0.), (0.8, 2.8), (0.8, 0.2), (0., 0.)],
                              [(1.5, 1.), (0.8, 2.8), (0.8, 0.2), (0., 0.)],
                              [(1.5, 1.), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(3., 0.), (0.8, 2.8), (0.8, 0.2), (0., 0.)],
                              [(3., 0.), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(3., 0.), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(1.5, 2.), (0.8, 2.8), (0.8, 0.2), (0., 0.)],
                              [(1.5, 2.), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(1.5, 2.), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(1.5, 2.), (0.8, 2.8), (0.8, 0.2), (3., 3.)],
                              [(1., 3.), (0.8, 2.8), (0.8, 0.2), (0., 0.)],
                              [(1., 3.), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(1., 3.), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(1., 3.), (0.8, 2.8), (0.8, 0.2), (3., 3.)],
                              [(1., 3.), (0.8, 2.8), (0.8, 0.2), (1.5, 2.)],
                              [(0., 3.), (0.8, 2.8), (0.8, 0.2), (0., 0.)],
                              [(0., 3.), (0.8, 2.8), (0.8, 0.2), (1., 0.)],
                              [(0., 3.), (0.8, 2.8), (0.8, 0.2), (1.5, 1.)],
                              [(0., 3.), (0.8, 2.8), (0.8, 0.2), (3., 3.)],
                              [(0., 3.), (0.8, 2.8), (0.8, 0.2), (1.5, 2.)],
                              [(0., 3.), (0.8, 2.8), (0.8, 0.2), (1., 3.)],


                              [(1.5, 1.), (7.2, 0.2), (7.2, 2.8), (8., 3.)],
                              [(1.5, 1.), (7.2, 0.2), (7.2, 2.8), (3., 3.)],
                              [(1.5, 1.), (7.2, 0.2), (7.2, 2.8), (1.5, 2.)],

                              [(3., 0.), (7.2, 0.2), (7.2, 2.8), (1.5, 1.)],
                              [(3., 0.), (7.2, 0.2), (7.2, 2.8), (8., 3.)],
                              [(3., 0.), (7.2, 0.2), (7.2, 2.8), (3., 3.)],
                              [(3., 0.), (7.2, 0.2), (7.2, 2.8), (1.5, 2.)],

                              [(8., 0.), (7.2, 0.2), (7.2, 2.8), (1.5, 1.)],
                              [(8., 0.), (7.2, 0.2), (7.2, 2.8), (3., 0.)],
                              [(8., 0.), (7.2, 0.2), (7.2, 2.8), (8., 3.)],
                              [(8., 0.), (7.2, 0.2), (7.2, 2.8), (3., 3.)],
                              [(8., 0.), (7.2, 0.2), (7.2, 2.8), (1.5, 2.)],

                              [(3., 3.), (7.2, 0.2), (7.2, 2.8), (8., 3.)],

                              [(1.5, 2.), (7.2, 0.2), (7.2, 2.8), (8., 3.)],
                              [(1.5, 2.), (7.2, 0.2), (7.2, 2.8), (3., 3.)],

                              [(1.5, 1.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (8., 0.)],
                              [(1.5, 1.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (8., 3.)],
                              [(1.5, 1.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (3., 3.)],

                              [(3., 0.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (8., 0.)],
                              [(3., 0.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (8., 3.)],
                              [(3., 0.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (3., 3.)],

                              [(8., 0.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (8., 3.)],
                              [(8., 0.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (3., 3.)],

                              [(1.5, 2.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (8., 0.)],
                              [(1.5, 2.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (8., 3.)],
                              [(1.5, 2.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (3., 3.)],

                              [(3., 3.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (8., 0.)],
                              [(3., 3.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (8., 3.)],

                              [(1.5, 1.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                              [(1.5, 1.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 0.)],
                              [(1.5, 1.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 3.)],

                              [(3., 0.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 0.)],
                              [(3., 0.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 3.)],

                              [(8., 0.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 3.)],

                              [(3., 3.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                              [(3., 3.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 0.)],
                              [(3., 3.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 3.)],

                              [(1.5, 2.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                              [(1.5, 2.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 0.)],
                              [(1.5, 2.), (7.2, 0.2), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 3.)],
                              [(1.5, 1.), (7.2, 2.8), (7.8, 2.8), (8., 0.)],
                              [(1.5, 1.), (7.2, 2.8), (7.8, 2.8), (8., 3.)],
                              [(1.5, 1.), (7.2, 2.8), (7.8, 2.8), (3., 3.)],

                              [(3., 0.), (7.2, 2.8), (7.8, 2.8), (8., 0.)],
                              [(3., 0.), (7.2, 2.8), (7.8, 2.8), (8., 3.)],
                              [(3., 0.), (7.2, 2.8), (7.8, 2.8), (3., 3.)],

                              [(8., 3.), (7.2, 2.8), (7.8, 2.8), (8., 0.)],

                              [(3., 3.), (7.2, 2.8), (7.8, 2.8), (8., 0.)],
                              [(3., 3.), (7.2, 2.8), (7.8, 2.8), (8., 3.)],

                              [(1.5, 2.), (7.2, 2.8), (7.8, 2.8), (8., 0.)],
                              [(1.5, 2.), (7.2, 2.8), (7.8, 2.8), (8., 3.)],
                              [(1.5, 2.), (7.2, 2.8), (7.8, 2.8), (3., 3.)],

                              [(1.5, 1.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                              [(1.5, 1.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 0.)],
                              [(1.5, 1.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 3.)],

                              [(3., 0.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 0.)],
                              [(3., 0.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 3.)],

                              [(8., 3.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                              [(8., 3.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 0.)],

                              [(3., 3.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                              [(3., 3.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 0.)],
                              [(3., 3.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 3.)],

                              [(1.5, 2.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                              [(1.5, 2.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 0.)],
                              [(1.5, 2.), (7.2, 2.8), (7.8, 2.8), (7.8, 0.2), (8., 3.)],

                              [(3., 3.), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                              [(3., 3.), (7.8, 2.8), (7.8, 0.2), (8., 0.)],
                              [(3., 3.), (7.8, 2.8), (7.8, 0.2), (8., 3.)],

                              [(8., 3.), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                              [(8., 3.), (7.8, 2.8), (7.8, 0.2), (8., 0.)],

                              [(8., 0.), (7.8, 2.8), (7.8, 0.2), (3., 0.)],
                             ]),
])
def test_vertex_sampler_with_holes(test_polygon, expected_sample_space):
    """
    Unit tests for simple sampler with support for holes.
    Simple samplers' objective is given a polygon, propose a list
    of cuts which originate from reflex verticies and end on some vertex of the polygon with holes
    such that a cut would be decomposing.
    These cuts will then be used by the optimizer to find the most optimal one.
    """
    decomp = Decomposition(Polygon(*test_polygon))

    sample_space = vertex_sampler_with_holes(decomp)

    ls_expected = [LineString(a) for a in expected_sample_space]
    for result in sample_space:
        print(f"Checking produced sample: {result.coords[:]}")
        assert any(result.equals(a) for a in ls_expected)

    for expected_sample in ls_expected:
        print(f"Checking expected sample: {expected_sample.coords[:]}")
        assert any(expected_sample.equals(a) for a in sample_space)

    assert len(sample_space) == len(ls_expected)


@pytest.mark.parametrize("test_polygon, test_sample_space, expected_num_cuts", [
    (TWO_REFLEX_ELONG, [((1.5, 1.), (1.5, 2.))], 1),
    (TWO_REFLEX_ELONG, [((1.5, 1.), (1.5, 2.)), ((1., 0.), (1., 3.))], 1),
])
def test_min_alt_optimize(test_polygon, test_sample_space, expected_num_cuts):
    """Verify that the optimizer attempts to choose the best cut from the supplied cuts."""
    decomp = Decomposition(Polygon(*test_polygon))
    test_samples = [LineString(a) for a in test_sample_space]

    min_alt_optimize(decomp, test_samples)

    assert len(decomp.cells) == expected_num_cuts + 1
